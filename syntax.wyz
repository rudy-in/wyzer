// This is a comment
/* This starts a multi line comment and I'll explain why im making this lang , its because of the endless debian logo ahh learning curve of rust */

/* Primitive types 
  int, bool , float , char
  types - i8, i16, i32, i64 , i128, u8, u16, u32, u64, u128 
  floating-point types - f32 , f64 
  numeric operators  + , / , % , ^ , - 
*/


// importing the modules or dependencies
use std.*;
/// you just cant spam it like
use std.io;
use std.print;
use std.println;

// there are 2 ways to import your dependencies in a clean way
// first one is to import it like std.*; where you import everything from std and you can just use anything you want , if you want to import something in specific then you can do it in this way
// to call something from a dependency like io you can just go with 
use std.(
  io.{read,open},
  print,
  println
)



def main() {
  std.println("Hello world") // you dont need a semi colon when there is nothing in the next line except for a bracket and whitespaces
}

// to measure the length of the spaces in a string or letters in a string you can use the len() function

def main() {
  let x = "   ";
  let x = x.len()
}


// functions are private by default , to make them public you can use the `pub` keyword , this is useful when you want to use a function in another file to call it , private functions cannot be called and you cant use main for everything however if you want to then you can by making it public but the best practice is to have another function

pub def logic() {
    let x = 8;
    var y: u32 = -8;
    if x == y {
    std.println("true");
  } else if x >= y {
      std.println("idk man");
    } else {
      std.println("false");
    }
}

// sub functions
pub def function() {
  std.println("does something");
   def function1() {
    std.println("does something something");
        def function2() {
        std.println("does something too");
            def function3() {
            std.println("does something else");
          }
        }
      }
}
// Creating a struct
struct Point {
    x: int;
    y: int;
}

// Calling it
def func() {
    let p = Point(10,20);
    std.println(p.x, p.y);
}

// enums 

// public enum

pub enum Color {
  Red,
  Green,
  Blue
}

// private enum

enum Color {
  Red,
  Green,
  Blue
}

def something() {
    let c = Color.Green;
    std.println(c);
}

// unions
// i cant decide it , one is 
union Value {
  int i
  float f
  string s
}

let v = Value.i(42);

match v {
  i => print(v.i),
  f => print(v.f),
  s => print(v.s)
}
// and the other is 

union Value {
  i: i64
  f: f64
  s: str
}

let v = Value.i(42);

match v {
  i => print(v.i),
  f => print(v.f),
  s => print(v.s)
}


// arrays

let x = [1,2,3,4,5];

// to call this array you always start from 0 so 1 in the array is placed at 0 , 2 is placed at 1

let y = x.0;
std.println(y)

// the code above will output 1 from the array

