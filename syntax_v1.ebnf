program           = { statement } ;

comment           = "//" , { any_char_except_newline } , newline
                  | "/*" , { any_char_except_"*/" } , "*/" ;

statement         = import_stmt
                  | function_def
                  | struct_def
                  | enum_def
                  | union_def
                  | match_stmt
                  | loop_stmt
                  | expr_stmt
                  | block ;

// Imports
import_stmt       = "use" , import_path , ";" ;
import_path       = identifier , [ ".*" | ".(" , import_items , ")" ] ;
import_items      = import_item , { "," , import_item } ;
import_item       = identifier | identifier , ".{" , import_items , "}" ;

// Functions
function_def      = [ "pub" ] , "def" , identifier , "(" , [ params ] , ")" , block ;
params            = param , { "," , param } ;
param             = identifier , [ ":" , type ] ;

// Structs
struct_def        = "struct" , identifier , "{" , struct_fields , "}" ;
struct_fields     = struct_field , { "," , struct_field } ;
struct_field      = identifier , ":" , type ;

// Enums
enum_def          = [ "pub" ] , "enum" , identifier , "{" , enum_variants , "}" ;
enum_variants     = identifier , { "," , identifier } ;

// Unions
union_def         = "union" , identifier , "{" , union_variants , "}" ;
union_variants    = union_variant , { "," , union_variant } ;
union_variant     = identifier , "(" , type , ")" ;

// Match
match_stmt        = "match" , expression , "{" , match_arms , "}" ;
match_arms        = match_arm , { "," , match_arm } ;
match_arm         = identifier , "(" , identifier , ")" , "=>" , expression ;

// Loops
loop_stmt         = while_loop | for_loop | infinite_loop ;
while_loop        = "while" , expression , block ;
for_loop          = "for" , "let" , identifier , "in" , range_expr , block ;
infinite_loop     = "loop" , block ;
range_expr        = expression , ( ".." | "..=" ) , expression
                  | identifier ;

// Blocks
block             = "{" , { statement } , "}" ;

// Expressions and Statements
expr_stmt         = expression , [ ";" ] ;
expression        = literal
                  | identifier
                  | expression , "." , identifier
                  | expression , "." , integer     // array indexing
                  | function_call
                  | binary_expr
                  | unary_expr ;
function_call     = identifier , "(" , [ arguments ] , ")" ;
arguments         = expression , { "," , expression } ;

binary_expr       = expression , binary_op , expression ;
unary_expr        = unary_op , expression ;
binary_op         = "+" | "-" | "*" | "/" | "%" | "^" | "==" | "!=" | ">=" | "<=" | ">" | "<" ;
unary_op          = "-" | "!" ;

// Types
primitive_type    = "int" | "bool" | "float" | "char"
                  | "i8" | "i16" | "i32" | "i64" | "i128"
                  | "u8" | "u16" | "u32" | "u64" | "u128"
                  | "f32" | "f64" ;
type              = primitive_type | "str" | identifier ;

// Literals
literal           = integer | float | string | boolean ;
integer           = digit , { digit } ;
float             = digit , { digit } , "." , { digit } ;
string            = '"' , { character } , '"' ;
boolean           = "true" | "false" ;

identifier        = letter , { letter | digit | "_" } ;

letter            = "A".."Z" | "a".."z" ;
digit             = "0".."9" ;
character         = ? any printable char except """ ? ;
newline           = "\n" | "\r" ;
any_char_except_newline = ? any char except newline ? ;
any_char_except_"*/"    = ? any char except "*/" ? ;
